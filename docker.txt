docker => linux os 위에서 돌아가는 container. 독립된 공간에서 lib, bin 폴도만 따로 갖고 공유된 운영체제를 사용함.

docker hub => image => container
app store => program => process 대치되는 내용임.

program이 여러개의 프로세스를 가질 수 있는 것 처럼 image도 여러 container를 가질 수 있다.

docker hub에서 image를 다운 받는 행위를 pull이라고 함.
image를 실행 시켜서 container를 만드는 행위를 run이라고 함.

docker pull [options] NAME:
ex) docker pull https (아파치 웹 서버)

docker run [options] IMAGE [COMMAND] [ARG...]
ex) docker run --name ws1 httpd

container는 컴퓨터 자원을 공유하고 있는 중이니 사용할 이유가 없어졌다면 
docker stop [options] CONTAINER
ex) docker stop ws1

docker ps => 돌아가는 컨테이너 보여줌
docker ps -a => 전체 컨테이너 보여줌.  (stop포함)

멈춘걸 다시 키고 싶다면

docker start ws1 => 이렇게 키면 로그가 안 보임
docker logs [CONTAINER]하면 로그가 보임 

ex) docker logs ws1 // docker logs -f ws1 하면 계속 적으로 로그 알려줌;

도커를 지우고 싶다면
stop명령어로 멈추고
docker stop ws1
docker rm ws1


이미지를 지우고 싶다면?
docker rmi IMAGE 하면 지워짐.

docker images 를 통해서 확인가능.



------------------------------------------------------------------------

docker run -p 80:80 container

하면 80번 포트로 들어온 연결을 container안의 80번 포트와 연결해줌
port-forwarding
만약 8000번 포트로 들어온 연결을 container 안의 80번 포트와 연결해 주려면?

docker run -p 8000:80 container


실행 환경은 container에게 맡기고 파일을 수정하는 방법은 host에서 진행하는 것인 docker를 제대로 이용하는 방법

docker run -p 8888:80 -v ~/Desktop/htdocs:/user/local/apache2/htdocs/ httpd

-v 는 내 디렉토리고 : 뒤에 내용은 container안에서 웹페이지를 찾도록 약속한 디렉토리임.






image를 만드는 방법은 크게 두 가지.
1. container를 만들고 그것을 commit하거나
2. dockerfile를 만들고 build하기.

이렇게 만든 image를 push하면 그 이미지를 쉽게 공유할 수 있게됨 이렇게 하면 어디서나 image를 접근할 수 있음.!

1. commit에 대해서 알아보자

내가 우분투를 사용하고 싶은데 또, git이 같이 설치되어 있으면 좋겠다고 생각하면

docker pull ubuntu
docker run -it --name only-ubuntu bash
-it옵션은 터미널에서 명령이 가능함.
docker ps =>해서 컨테이너 생성했는지 확인하고

뭔가를 깔 경우 꼭 미리 해줘여함
apt update; 
해서 갱신하고

apt install git하면 git이 설치됨

그다음 커밋해서 image로 만들자

docker commit only-ubuntu egoing:ubuntu-git 하면 egoing이라는 repository에 깃이 깔린 우분투 이미지가 생김!


2. build를 해서 image를 만들어 보자



docker run --name web-server -it ubuntu:20.04

docker commit web-server web-server-commit => 저 위에서 생성한 컨테이너를 이미지로 만들 수 있음..

docker run --name web-server -it ubuntu:20.04로 열어놨던 shell에서 python을 깔고 싶으면 
apt update // 뭔가 깔 때 필수!

apt install python3

mkdir -p /var/www/html
cd /var/www/html

Dockerfile에 image를 만들 내용을 생성해서 build해서 생성가능

Dockerfile 

FROM ubuntu:20.04
RUN apt update 
RUN apt install python3

이렇게 하면 되지만 RUN이 실행할 때마다 layer가 생성되기 때문에 이런 명령어는 하나로 연결해서 사용하는게 더 좋음.

RUN apt update && apt install python3 
이렇게 하나로 뭉쳐줌!
RUN apt update && apt install -y python3 
-y옵션을 넣어주면 원래 사용자의 입력을 받도록 하는건데 이렇게 하면 y입력 자동으로 넣어줌.

WORKDIT /var/www/html => 이렇게 하면 없으면 만들고 저기로 이동하고 명령어가 실행될때 저 위치를 대상으로 명령이 실행됨

RUN echo "Hello. <strong>Docker</strong>" > index.html
로 하면 저 WORKDIT바로 아래에 index.html에 위의 내용이 담긴 파일이 생김

이렇게 말고 host에서 관리도 가능함

COPY ["index.html","."]
host에 있는 index.html을 WORKDIT에 복사하라는 말!

CMD ["python3","-u","-m","http.server"]


